parameters:
  coverage: false

steps:
- checkout: self
  clean: true
  fetchDepth: 5

- script: |
   git fetch -q origin $(system.pullRequest.targetBranch)
   if ! git diff --name-only HEAD $(git merge-base HEAD FETCH_HEAD) | grep -qvE '(\.rst$|^Doc|^Misc)'
   then
     echo "Only docs were updated, stopping build process."
     echo "##vso[task.setvariable variable=DocOnly]true"
     exit
   fi
  displayName: Detect doc-only changes
  condition: and(succeeded(), variables['system.pullRequest.targetBranch'])

- script: ./python Tools/scripts/patchcheck.py --travis true
  displayName: 'Run patchcheck.py'
  condition: and(and(succeeded(), ne(variables['DocOnly'], 'true')), variables['system.pullRequest.targetBranch'])

- script: ./.azure-pipelines/posix-deps.sh $(openssl_version)
  displayName: 'Install dependencies'
  condition: and(succeeded(), ne(variables['DocOnly'], 'true'))

- script: ./configure --with-pydebug
  displayName: 'Configure CPython (debug)'
  condition: and(succeeded(), ne(variables['DocOnly'], 'true'))

- script: make -s -j4
  displayName: 'Build CPython'
  condition: and(succeeded(), ne(variables['DocOnly'], 'true'))

- ${{ if parameters.coverage }}:
  - script: ./python -m venv venv && ./venv/bin/python -m pip install -U coverage
    displayName: 'Set up virtual environment'
    condition: and(succeeded(), ne(variables['DocOnly'], 'true'))

  - script: ./venv/bin/python -m test.pythoninfo
    displayName: 'Display build info'
    condition: and(succeeded(), ne(variables['DocOnly'], 'true'))

  - script: xvfb-run ./venv/bin/python -m coverage run --pylib -m test --fail-env-changed -uall,-cpu -x test_multiprocessing_fork -x test_multiprocessing_forkserver -x test_multiprocessing_spawn -x test_concurrent_futures
    displayName: 'Tests with coverage'
    condition: and(succeeded(), ne(variables['DocOnly'], 'true'))

  - script: source ./venv/bin/activate && bash <(curl -s https://codecov.io/bash)
    displayName: 'Publish code coverage results'
    condition: and(succeeded(), ne(variables['DocOnly'], 'true'))


- ${{ if not(parameters.coverage) }}:
  - script: make pythoninfo
    displayName: 'Display build info'
    condition: and(succeeded(), ne(variables['DocOnly'], 'true'))

  - script: xvfb-run make buildbottest TESTOPTS="-j4 -uall,-cpu --junit-xml=$(build.binariesDirectory)/test-results.xml"
    displayName: 'Tests'
    condition: and(succeeded(), ne(variables['DocOnly'], 'true'))

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFiles: '$(build.binariesDirectory)/test-results.xml'
    mergeTestResults: true
    platform: $(platformName)
  condition: and(succeededOrFailed(), ne(variables['DocOnly'], 'true'))
